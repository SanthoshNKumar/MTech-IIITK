#include<stdio.h>
#include<stdlib.h>

struct Node
{
    struct Node *prev;
    int data;
    struct Node *next;
};

void append(struct Node** head_ref,int _data){
    
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    
    struct Node* last = *head_ref;
    
    new_node->data = _data;
    
    new_node->next = NULL;
    
    if(*head_ref == NULL){
        new_node->prev= NULL;
        *head_ref = new_node;
        return;
    }
    
    while(last->next != NULL){
        last = last->next;
    }
    
    last->next = new_node;
    
    new_node->prev = last;
    
    return;
}

void display(struct Node* p){
    while(p!=NULL){
        printf("%d ",p->data);
        
        p = p->next;
    }
}

int findsize(struct Node* node){
    int res = 0;
    while(node!=NULL){
        res++;
        node = node->next;
    }
    
    return res;
}

void reverse(struct Node** head_ref){
    struct Node* temp = NULL;
    struct Node* current = *head_ref;
    
    while(current!= NULL){
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
        current = current->prev;
    }
    
    if(temp != NULL){
        *head_ref = temp ->prev;
    }
}

int search(struct Node** head_ref,int x){
    
    struct Node* temp = *head_ref;
    
    int pos =0;
    
    while(temp->data !=x && temp->next != NULL){
        pos++;
        temp = temp ->next;
    }
    
    if(temp->data !=x){
        return -1;
    }
    
    return (pos +1);
}

int count(struct Node* head,int search_for){
    struct Node* current = head;
    int _count =0;
    while(current!=NULL)
    {
        if(current->data == search_for){
            _count++;
        }
        
        current= current->next;
    }
    
    return _count;
}

void deleteNode(struct Node** head_ref,struct Node* del){
    
    if(*head_ref == NULL || del == NULL)
    {
        return;
    }
    
    if(*head_ref == del){
        *head_ref = del->next;
    }
    
    if(del->next !=NULL){
        del->next->prev = del->prev;
    }
    
    if(del->prev !=NULL){
        del->prev->next = del->next;
    }
    
    free(del);
}

void deleteNodeAtGivenPos(struct Node** head_ref,int n)
{
    if(*head_ref == NULL || n<=0){
        return;
    }
    
    struct Node* current = *head_ref;
    int i;
    
    for(int i=1;current !=NULL && i<n;i++)
    {
        current = current->next;
    }
    
    if(current == NULL){
        return; 
    }
    
    deleteNode(head_ref,current);
}

int main()
{
    
    struct Node* head = NULL;
    struct Node* ptr = NULL;
    
    int val,val1,val2;
    int second_occr_pos;
    
    scanf("%d",&val);
    
    while(val!=-999)
    {
        append(&head,val);
        append(&ptr,val);
        scanf("%d",&val);
    }
    
    int _size = findsize(head);
    int _count = count(head,42);
    
    int first_occr_pos = search(&ptr,42);
    if(_count >1){
        reverse(&ptr);
        second_occr_pos = search(&ptr,42);
        second_occr_pos = (_size - second_occr_pos)+ 1;
    }
    
    
    if(_count ==0){
        printf("At least one element must be 42.");
    }else if(_count ==1 && first_occr_pos ==1){
        printf("No element before 42");
    }
    else if(_count ==1 && first_occr_pos !=1){
        deleteNodeAtGivenPos(&head,first_occr_pos -1);
        display(head);
    }
    else{
        
        scanf("%d",&val1);
        if(val1 ==1 & first_occr_pos != 1){
            deleteNodeAtGivenPos(&head,first_occr_pos -1);
            
            display(head);
        }else{
            printf("%d occurrence of 42 found. Where should the deletion occur? \n",_count);
            
            if(first_occr_pos ==1 & val1 ==1){
                printf("No element before 42");
            }else{
                deleteNodeAtGivenPos(&head,second_occr_pos -1);
                display(head);
            }
        }
    }
    //display(head);
}
