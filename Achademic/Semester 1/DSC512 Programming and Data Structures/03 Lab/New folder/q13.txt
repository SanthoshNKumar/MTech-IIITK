#include<stdio.h>
#include<stdlib.h>

struct Node{
    struct Node *prev;
    int data;
    struct Node *next;
};

void append(struct Node ** head_ref,int _data){
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    
    struct Node* last = *head_ref;
    
    new_node->data = _data;
    
    new_node->next = NULL;
    
    if(*head_ref == NULL){
        new_node->prev = NULL;
        *head_ref = new_node;
        return;
    }
    
    while(last->next !=NULL){
        last = last->next;
    }
    
    last->next = new_node;
    
    new_node->prev = last;
    
    return;
}


void display(struct Node* p){
    while(p!=NULL){
        printf("%d ",p->data);
        p = p->next;
    }
}


int findsize(struct Node* node){
     int res = 0;
     while(node !=NULL){
         res++;
         node = node->next;
     }
     return res;
}


void deleteNode(struct Node** head_ref,struct Node* del){
    if(*head_ref == NULL || del == NULL){
        return;
    }
    
    if(*head_ref == del){
        *head_ref = del->next;
    }
    
    if(del->next != NULL){
        del ->next->prev = del->prev;
    }
    
    if(del->prev !=NULL){
        del->prev->next = del->next;
    }
    
    free(del);
}

void deleteNodeAtGivenPos(struct Node** head_ref,int n){
    
    if(*head_ref == NULL || n<=0){
        return;
    }
    
    struct Node* current = *head_ref;
    int i;
    
    for(int i =1;current!= NULL && i<n;i++){
        current = current->next;
    }
    
    if(current== NULL){
        return;
    }
    
    deleteNode(head_ref,current);
}

void reverse(struct Node** head_ref){
    
    struct Node* temp = NULL;
    struct Node* current = *head_ref;
    
    while(current!=NULL){
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
        current = current->prev;
    }
    
    if(temp != NULL){
        *head_ref = temp->prev;
    }
}

int main(){
    
    struct Node* head = NULL;
    
    int val,count;
    
    scanf("%d",&val);
    
    count = 0;
    while(val != -999){
        count = count+1;
        append(&head,val);
        scanf("%d",&val);
    }
    
    //printf("%d \n",count);
    
    if(count < 3){
        printf("Error!! Underflow, Minimum 3 elements are required.");
    }else if(count == 3){
        printf("NULL");
    }else{
            for(int i=3;i>=1;i--){
                int size = findsize(head);
                deleteNodeAtGivenPos(&head,size);
            }
            
            reverse(&head);
    
            display(head);
    }
}
