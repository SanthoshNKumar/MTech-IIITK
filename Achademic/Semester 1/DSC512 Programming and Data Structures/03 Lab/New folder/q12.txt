#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct node{
  int data;
  struct node *prev;
  struct node *next;    
};



struct node *head = NULL;
struct node *last = NULL;
struct node *current = NULL;

void insert(int data){
    
    struct node *link = (struct node*)malloc(sizeof(struct node));
    
    link->data = data;
    link->prev = NULL;
    link->next = NULL;
    
    if(head== NULL){
        head = link;
        return;
    }
    
    current = head;
    
    while(current->next!=NULL){
        current = current->next;
    }
    
    current->next = link;
    last = link;
    link->prev = current;
}


struct node* insert_beginning(struct node* head,int data){
    
    struct node *new_node;
    
    new_node = (struct node*)malloc(sizeof(struct node));
    
    new_node->data = data;
    new_node->next = head;
    new_node->prev = NULL;
    head->prev = new_node;
    head = new_node;
    
    return head;
}

void reverse(struct node** head_ref){
    
    struct node* temp = NULL;
    struct node* current = *head_ref;
    
    while(current!= NULL){
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
        current = current->prev;
    }
    
    if(temp != NULL){
        *head_ref = temp->prev;
    }
}

struct Node{
    int data;
    struct Node* next;
};

struct Node* get_userInput_in_SSL(){
    
    struct Node* newNode = NULL;
    
    char string[50];
    
    scanf("%[^\n]s",string);
    
    char * token = strtok(string," ");
    
    while(token!=NULL){
        
        const char* s = token;
        
        int x;
        
        sscanf(s,"%d",&x);
        
        struct Node *ptr = newNode;
        struct Node *temp = (struct Node*)malloc(sizeof(struct Node));
        
        temp->data = x;
        temp->next = NULL;
        
        if(newNode == NULL){
            newNode= temp;
        }else{
            while(ptr->next)
            {
                ptr=ptr->next;
            }
             ptr->next = temp;
        }
        
        token = strtok(NULL," ");
    }
    return newNode;
}

int count_nodes(struct Node *head){
    int count =0;
    
    struct Node *ptr = head;
    
    if(head!=NULL){
        
        while(ptr!=NULL){
            count++;
            ptr= ptr->next;
        }
        
    }
    
    return count;
}

int main()
{
    int val,val1;
    
    scanf("%d",&val);
    
    while(val!=-999){
        insert(val);
        scanf("%d",&val);
    }
    
   // struct Node* newNode = get_userInput_in_SSL();
    
    //int nodescount = count_nodes(newNode);
    
   // if(nodescount < 3){
   //     printf("Error!! Three elements must be inserted.");
   // }else{
   //     head = insert_beginning(head,val1);
   // }
    
    for(int i=0;i<3;i++){
        scanf("%d",&val1);
        
        head = insert_beginning(head,val1);
    }
    
    reverse(&head);
    
    struct node *ptr = head;
    
    while(ptr!=NULL){
        printf("%d ",ptr->data);
        ptr = ptr->next;
    }
    
    return 0;
    
}
