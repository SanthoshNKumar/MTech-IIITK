

************************

Traversal - access each element of the linked list
Insertion - adds a new element to the linked list
Deletion - removes the existing elements
Search - find a node in the linked list
Sort - sort the nodes of the linked list


************************

#include <stdio.h>

struct Node{
    int data;
    struct Node* next;
};

int main()
{
   struct Node* head = (struct Node*)malloc(sizeof(struct Node));

    int x;
    printf("Enter the value:\n");
    scanf("%d",&x);
    
    head->data =x;
    head->next = NULL;
    
    printf("%d",head->data); 
    
    return 0;
    
}

************************

# Create Simple Linked List

#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* next;
};

int main()
{
    struct Node* head = NULL;
    struct Node* second = NULL;
    struct Node* third = NULL;
    
    head = (struct Node*)malloc(sizeof(struct Node));
    second = (struct Node*)malloc(sizeof(struct Node));
    third = (struct Node*)malloc(sizeof(struct Node));
    
    head ->data = 1;
    head->next = second;
    
    second->data = 2;
    
    second->next = third;
    
    third->data = 3;
    third->next= NULL;
    
    return 0;
}


**************************************************************************************

Traversal of a Linked List

#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* next;
};

void printList(struct Node* n)
{
    while (n != NULL) {
        printf(" %d ", n->data);
        n = n->next;
    }
}

int main()
{
    struct Node* head = NULL;
    struct Node* second = NULL;
    struct Node* third = NULL;
    
    head = (struct Node*)malloc(sizeof(struct Node));
    second = (struct Node*)malloc(sizeof(struct Node));
    third = (struct Node*)malloc(sizeof(struct Node));
    
    head ->data = 1;
    head->next = second;
    
    second->data = 2;
    
    second->next = third;
    
    third->data = 3;
    third->next= NULL;
    
    
    printList(head);
    
    return 0;
}

*******************************************************************************

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};


int main(){
    
    struct node *ptr;
    ptr = (struct node *)malloc(sizeof(struct node *));
    
    if(ptr == NULL){
        printf("Overflow \n");
    }
}

*******************************************************************************
#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* next;
};

int main()
{
   struct Node* head = (struct Node*) malloc(sizeof(struct Node));
   struct Node* node2 = (struct Node*) malloc(sizeof(struct Node));
   
   head->data = 15;
   head->next = node2;
   
   node2->data = 25;
   node2->next = NULL;
    
   while(head !=NULL){
       printf(" %d ", head->data);
       head = head->next;
   }
   
   return 0;
    
}

/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node *next;
};


int main(){
    
    //creating 4 pointers of type struct Node
    //So these can point to address of struct type variable
    struct Node* head = NULL;
    struct Node* node2 = NULL;
    struct Node* node3 = NULL;
    struct Node* node4 = NULL;
    
    // allocate 3 nodes in the heap 
    
    head =  (struct Node*)malloc(sizeof(struct Node));
    node2 = (struct Node*)malloc(sizeof(struct Node));
    node3 = (struct Node*)malloc(sizeof(struct Node));
    node4 = (struct Node*)malloc(sizeof(struct Node));
    
    head->data = 15;
    head->next = node2;
    
    node2->data = 10;
    node2->next = node3;
    
    node3->data = 12;
    node3->next = node4;
    
    node4->data = 3;
    node4->next = NULL;
    
    printf("Linklist : ");
    
    while(head!=NULL){
        printf("%d ",head->data);
        head = head->next;
    }
    printf("\n");
}

void display(struct Node* node){

    //as linked list will end when Node is Null
    while(node!=NULL){
        printf("%d ",node->data);
        node = node->next;
    }
    printf("\n");
}


************************************************************************
#include<stdio.h>
#include<stdlib.h>

struct Node{
    int data;
    struct Node *next;
};

int calcSize(struct Node* node){
    int size=0;

    while(node!=NULL){
        node = node->next;
        size++;
    }
    return size;
}


void insertPosition(int pos, int data, struct Node** head)
{
    int size = calcSize(*head);

    //If pos is 0 then should use insertStart method
    //If pos is less than 0 then can't enter at all
    //If pos is greater than size then bufferbound issue
    if(pos < 1 || size < pos) 
    { 
        printf("Can't insert, %d is not a valid position\n",pos); 
    } 
    else 
    { 
        struct Node* temp = *head; 
        struct Node* newNode = (struct Node*) 
        malloc(sizeof(struct Node)); 
        newNode->data = data;
        newNode->next = NULL;

        while(--pos)
        {
            temp=temp->next;
        }
        //(25)->next = 10 as 12->next is 10 
        newNode->next= temp->next;
        // (12)->next = 25
        temp->next = newNode;
        //new node added in b/w 12 and 10
    }
}

void insertStart(struct Node** head, int data){

    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));

    newNode->data = data;
    newNode->next = *head;

    //changing the new head to this freshly entered node
    *head = newNode;
}

void insertLast(struct Node** head, int data){

    struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));

    newNode->data = data;
    newNode->next = NULL;

    //need this if there is no node present in linked list at all
    if(*head==NULL){
        *head = newNode;
        return;
    }

    struct Node* temp = *head;

    while(temp->next!=NULL)
        temp = temp->next;

    temp->next = newNode;
}

void display(struct Node* node){

    //as linked list will end when Node is Null
    while(node!=NULL){
        printf("%d ",node->data);
        node = node->next;
    }
    printf("\n");
}

int main()
{
    struct Node* head = NULL;

    // Need '&' i.e. address as we need to change head
    insertStart(&head,12);
    insertStart(&head,16);
    insertStart(&head,20);

    insertLast(&head,10);
    insertLast(&head,14);
    insertLast(&head,18);
    insertLast(&head,11);
    
     //Inserts after 3rd position
    insertPosition(3,25,&head);

    // no need for '&' as head need not be changed
    // only doing traversal
    display(head); 
    return 0; 
}	

Output Before Insert at ith Position :  20 16 12 10 14 18 11 

Output After Insert at ith Position  : 20 16 12 25 10 14 18 11

************************************************************************
