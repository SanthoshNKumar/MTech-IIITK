knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(tidyr)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(tidyr)
library(dplyr)
confirmedraw = read.csv("time_series_covid19_confirmed_global.csv")
confirmedraw = read.csv("C:\Users\MiniProject\time_series_covid19_confirmed_global.csv")
confirmedraw = read.csv("C:\Users\MiniProject\time_series_covid19_confirmed_global.csv")
confirmedraw = read.csv("C:\\Users\\MiniProject\\time_series_covid19_confirmed_global.csv")
deathsraw= read.csv("C:\Users\MiniProject\time_series_covid19_deaths_global.csv")
confirmedraw = read.csv("C://Users//MiniProject//time_series_covid19_confirmed_global.csv")
deathsraw= read.csv("C:\Users\MiniProject\time_series_covid19_deaths_global.csv")
confirmedraw = read.csv("time_series_covid19_confirmed_global.csv")
confirmedraw = read.csv("time_series_covid19_confirmed_global.csv")
deathsraw= read.csv("time_series_covid19_deaths_global.csv")
recoveredraw = read.csv("time_series_covid19_recovered_global.csv")
confirmedraw = read.csv("time_series_covid19_confirmed_global.csv")
deathsraw= read.csv("time_series_covid19_deaths_global.csv")
recoveredraw = read.csv("time_series_covid19_recovered_global.csv")
head(countryToContinent)
print(dim(recoveredraw))
### Read The input data
confirmedraw = read.csv("time_series_covid19_confirmed_global.csv")
deathsraw= read.csv("time_series_covid19_deaths_global.csv")
recoveredraw = read.csv("time_series_covid19_recovered_global.csv")
print(dim(confirmedraw))
print(dim(deathsraw))
print(dim(recoveredraw))
#Sample data
head(recoveredraw)
#Sample data
head(recoveredraw,1)
head(recoveredraw[1,1:4])
#Sample data
head(recoveredraw[1,1:10])
# Function for initial Preprocessing Activity to Create and Structure the raw data
formatTheData = function(data,colName) {
# Rename the lengthy columns
covid_data = data %>% rename('subregion' = 'Province.State','country' = 'Country.Region')
# Explude not requied columns
covid_data = covid_data %>%  pivot_longer(cols = -one_of('country','subregion','Lat','Long')
,names_to = 'date'
,values_to = colName
)
# Remove 'X' on the Dataframe header
covid_data$date <- covid_data$date %>% sub("X", "", .)
# COnver to dateformat
covid_data$date = mdy(covid_data$date)
# Sort the data in ascending order
covid_data = covid_data %>% arrange(date)
# Round off the values to 3 decimal on Lat and Long
covid_data$Lat = round(covid_data$Lat,3)
covid_data$Long = round(covid_data$Long,3)
#covid_data = merge(countryToContinent,covid_data,  by.y = "Country", by.x = "Country.Region")
print(unique(format(covid_data$date, "%Y")))
print(dim(covid_data))
# I have obserbed that some issue in canadat nation data where recovered and Death and Conf cases not maching so ignoring
covid_data  = covid_data[covid_data$country != 'canada',]
return(data.frame(covid_data))
}
# Function for initial Preprocessing Activity to Create and Structure the raw data
formatTheData = function(data,colName) {
# Rename the lengthy columns
covid_data = data %>% rename('subregion' = 'Province.State','country' = 'Country.Region')
# Explude not requied columns
covid_data = covid_data %>%  pivot_longer(cols = -one_of('country','subregion','Lat','Long')
,names_to = 'date'
,values_to = colName
)
# Remove 'X' on the Dataframe header
covid_data$date <- covid_data$date %>% sub("X", "", .)
# COnver to dateformat
covid_data$date = mdy(covid_data$date)
# Sort the data in ascending order
covid_data = covid_data %>% arrange(date)
# Round off the values to 3 decimal on Lat and Long
covid_data$Lat = round(covid_data$Lat,3)
covid_data$Long = round(covid_data$Long,3)
#covid_data = merge(countryToContinent,covid_data,  by.y = "Country", by.x = "Country.Region")
print(unique(format(covid_data$date, "%Y")))
print(dim(covid_data))
# Have observed that some issue in canadat nation data where recovered and Death and Conf cases not maching so ignoring
covid_data  = covid_data[covid_data$country != 'canada',]
return(data.frame(covid_data))
}
case.conf = formatTheData(confirmedraw,"conf")
case.death = formatTheData(deathsraw,"death")
case.recov = formatTheData(recoveredraw,"recov")
head(case.conf)
# Observed mapping issue with country values 'China' and 'Canada' so ignoring the data belongs those values
case.conf = case.conf[case.conf$country!= 'Canada' & case.conf$country!= 'China',]
case.death = case.death[case.death$country!= 'Canada' & case.death$country!= 'China',]
case.recov = case.recov[case.recov$country!= 'Canada' & case.recov$country!= 'China',]
#head(case.conf)
head(case.conf %>% arrange(country))
tail(case.conf)
tail(case.death)
full_date = full_join(case.conf, case.death, by = c('subregion','country','Lat','Long', 'date'))
country = full_join(full_date, case.recov, by = c('subregion','country','Lat','Long', 'date'))
sum(is.na(country))
# Remove NA and Nan data from the processed data alsi negative values
country = country %>% filter(!is.na(Lat) & !is.na(Long) & !is.na(conf) & !is.na(death) & !is.na(recov))
country = country[country$recov >=0 & country$death >=0 & country$conf >=0,]
sum(is.na(country))
dim(country)
length(unique(country$country))
country$Active = country$conf -  country$death - country$recov
country = country[country$Active>=0 & country$recov>=0,]
dim(country)
head(country[country$recov !=0,])
country_newCases <- country
country_newCases$newCases = as.integer(0)
country_newCases <- country_newCases[0,]
newcol = "newCases"
for(c in unique(country$country))
{
country_newCases = rbind(country_newCases,getNewCases(c,'conf','newCases'))
}
getNewCases = function(nation,col,newcolname){
df = country
df = df[df$country == nation,]
df = df %>% arrange(date)
newCases = df[2:dim(df)[1],][,col] - df[1:dim(df)[1],][,col]
newCases = append(newCases,0,0)
newCases = newCases[-length(newCases)]
df$newCases = as.integer(0)
names(df)[names(df) == "newCases"] <- newcol
df[,newcol] <- newCases
return(df)
}
country_newCases <- country
country_newCases$newCases = as.integer(0)
country_newCases <- country_newCases[0,]
newcol = "newCases"
for(c in unique(country$country))
{
country_newCases = rbind(country_newCases,getNewCases(c,'conf','newCases'))
}
country_newCases <- country
country_newCases$newCases = as.integer(0)
country_newCases <- country_newCases[0,]
newcol = "newCases"
for(c in unique(country$country))
{
country_newCases = rbind(country_newCases,getNewCases(c,'conf','newCases'))
}
country_newDeath <- country
country_newDeath$newDeath = as.integer(0)
country_newDeath <- country_newDeath[0,]
col = "death"
newcol = "newDeath"
for(c in unique(country$country))
{
country_newDeath = rbind(country_newDeath,getNewCases(c,col,newcol))
}
getNewCases = function(nation,col,newcolname){
df = country
df = df[df$country == nation,]
df = df %>% arrange(date)
newCases = df[2:dim(df)[1],][,col] - df[1:dim(df)[1],][,col]
newCases = append(newCases,0,0)
newCases = newCases[-length(newCases)]
df$newCases = as.integer(0)
names(df)[names(df) == "newCases"] <- newcol
df[,newcol] <- newCases
return(df)
}
country_newCases <- country
country_newCases$newCases = as.integer(0)
country_newCases <- country_newCases[0,]
newcol = "newCases"
for(c in unique(country$country))
{
country_newCases = rbind(country_newCases,getNewCases(c,'conf','newCases'))
}
country_newDeath <- country
country_newDeath$newDeath = as.integer(0)
country_newDeath <- country_newDeath[0,]
col = "death"
newcol = "newDeath"
for(c in unique(country$country))
{
country_newDeath = rbind(country_newDeath,getNewCases(c,col,newcol))
}
country_newRecovered <- country
country_newRecovered$newRecovered = as.integer(0)
country_newRecovered <- country_newRecovered[0,]
col = "recov"
newcol = "newRecovered"
for(c in unique(country$country))
{
country_newRecovered = rbind(country_newRecovered,getNewCases(c,col,newcol))
}
country_newActive <- country
country_newActive$newActive = as.integer(0)
country_newActive <- country_newActive[0,]
col = "Active"
newcol = "newActive"
for(c in unique(country$country))
{
country_newActive = rbind(country_newActive,getNewCases(c,col,newcol))
}
fulldata1 = full_join(country_newCases, country_newDeath, by = c('subregion','country','Lat',
'Long', 'date','conf','death',
'recov','Active'))
fulldata2 = full_join(fulldata1, country_newActive, by = c('subregion','country','Lat',
'Long', 'date','conf','death',
'recov','Active'))
country = full_join(fulldata2, country_newRecovered, by = c('subregion','country','Lat',
'Long', 'date','conf','death',
'recov','Active'))
head(country)
sum(country$newCases)
sum(country$newCases)
sum(country[country$country == "India",]$newCases)
sum(country$newCases)
sum(country[country$country == "India",]$newCases)
# Total cases reported so far
sum(country$newCases)
# Total cases reported in India
sum(country[country$country == "India",]$newCases)
## Confirmed Cases Country wise
Countrywise_ConfCases = country %>% group_by(country) %>%
summarise(totalCases_conf = sum(newCases)) %>%
arrange(desc(totalCases_conf))
top_10_Country_Highest_ConfCases = head(Countrywise_ConfCases,10)
## Confirmed Cases Country wise
Countrywise_ConfCases = country %>% group_by(country) %>%
summarise(totalCases_conf = sum(newCases)) %>%
arrange(desc(totalCases_conf))
top_10_Country_Highest_ConfCases = head(Countrywise_ConfCases,10)
head(top_10_Country_Highest_ConfCases)
# Visualize the same using ggplot
ggplot(data = head(top_10_Country_Highest_ConfCases),aes(x = reorder(country,totalCases_conf),
y = totalCases_conf,fill = country)) + geom_bar(stat = "identity") +
labs(title = "Countries with highest number of cases(Millions)") + xlab("Country")
# Visualize the same using ggplot
ggplot(data = head(top_10_Country_Highest_ConfCases),aes(x = reorder(country,totalCases_conf),
y = totalCases_conf,fill = country)) + geom_bar(stat = "identity") +
labs(title = "Countries with highest number of cases(Millions)") + xlab("Country")
# Lowest cases reported
top_10_Country_lowest_ConfCases = tail(Countrywise_ConfCases %>% arrange(desc(totalCases_conf)),10)
top_10_Country_lowest_ConfCases
ggplot(data = head(top_10_Country_lowest_ConfCases),aes(x = reorder(country,totalCases_conf),
y = totalCases_conf,fill = country)) + geom_bar(stat = "identity") +
labs(title = "Countries with lowest number of cases(Millions)") + xlab("Country")
# Daily Trend on Confirmed Cases
conf_Cases_daily = data.frame(country %>% group_by(date) %>% summarise(DailyTrend = sum(newCases)))
head(conf_Cases_daily)
conf_Cases_daily$DailyTrend <- ifelse(conf_Cases_daily$DailyTrend < 0,0,conf_Cases_daily$DailyTrend)
ggplot(conf_Cases_daily,aes(x = date, y = DailyTrend)) +
geom_line() +
labs(title = "Confimed Cases daily basis")
# Look ate Death Cases Countrywise
death_Cases_country = country %>% group_by(country) %>%
summarise(totalCases_Death = sum(newDeath)) %>%
arrange(desc(totalCases_Death))
top_10_Country_Highest_deathCases = head(death_Cases_country %>% arrange(desc(totalCases_Death)),10)
top_10_Country_Highest_deathCases$totalCases_Death =  top_10_Country_Highest_deathCases$totalCases_Death / 100000
top_10_Country_Highest_deathCases
ggplot(data = head(top_10_Country_Highest_deathCases),aes(x = reorder(country,totalCases_Death),
y = totalCases_Death,fill = country)) + geom_bar(stat = "identity") +
labs(title = "Countries with highest number of Death cases(Lakh)") + xlab("Country")
tail(death_Cases_country)
top_10_Country_lowest_DeathCases = tail(death_Cases_country %>% arrange(desc(totalCases_Death)),10)
ggplot(data = head(top_10_Country_lowest_DeathCases),aes(x = reorder(country,totalCases_Death),
y = totalCases_Death,fill = country)) + geom_bar(stat = "identity") +
labs(title = "Countries with lowest number of cases(Millions)") + xlab("Country")
death_Cases_daily = data.frame(country %>% group_by(date) %>% summarise(DailyTrend = sum(newDeath)))
head(death_Cases_daily)
death_Cases_daily$DailyTrend <- ifelse(death_Cases_daily$DailyTrend < 0,0,death_Cases_daily$DailyTrend)
ggplot(death_Cases_daily,aes(x = date, y = DailyTrend)) +
geom_line() +
labs(title = "Death Cases daily basis")
recov_Cases_country <- data.frame(country = NA,totalCases = NA)
df = country
getRecovCasesCounrywise = function(country)
{
df = df[df$country == country,]
df$recov_daily = df[2:dim(df)[1],]$recov - df[1:dim(df)[1],]$recov
df$recov_daily <- ifelse(df$recov_daily < 0,0,df$recov_daily)
return (data.frame(country = country,totalCases = sum(df$recov_daily)))
recov_Cases_country <- data.frame(country = NA,totalCases = NA)
df = country
getRecovCasesCounrywise = function(country)
{
df = df[df$country == country,]
df$recov_daily = df[2:dim(df)[1],]$recov - df[1:dim(df)[1],]$recov
df$recov_daily <- ifelse(df$recov_daily < 0,0,df$recov_daily)
return (data.frame(country = country,totalCases = sum(df$recov_daily)))
}
recov_Cases_country <- data.frame(country = NA,totalCases = NA)
df = country
getRecovCasesCounrywise = function(country)
{
df = df[df$country == country,]
df$recov_daily = df[2:dim(df)[1],]$recov - df[1:dim(df)[1],]$recov
df$recov_daily <- ifelse(df$recov_daily < 0,0,df$recov_daily)
return (data.frame(country = country,totalCases = sum(df$recov_daily)))
}
for(c in unique(country$country))
{
recov_Cases_country = rbind(recov_Cases_country,getRecovCasesCounrywise(c))
}
recov_Cases_country = recov_Cases_country %>% filter(!is.na(totalCases))
colnames(recov_Cases_country)[2] <- "totalCases_recov"
top_10_Country_Highest_recovCases = head(recov_Cases_country %>% arrange(desc(totalCases_recov)),10)
top_10_Country_Highest_recovCases$totalCases_recov =  top_10_Country_Highest_recovCases$totalCases_recov / 1000000
top_10_Country_Highest_recovCases
ggplot(data = head(top_10_Country_Highest_recovCases),aes(x = reorder(country,totalCases_recov),
y = totalCases_recov,fill = country)) +
geom_bar(stat = "identity") +
labs(title = "Countries with highest number of cases(Millions)") + xlab("Country")
top_10_Country_lowest_recovCases = tail(recov_Cases_country %>% arrange(desc(totalCases_recov)),20)
ggplot(data = head(top_10_Country_lowest_recovCases),aes(x = reorder(country,totalCases_recov),
y = totalCases_recov,fill = country)) +
geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Countries with lowest number of cases") + xlab("Country")
recov_Cases_daily = data.frame(country %>% group_by(date) %>% summarise(recovCases = sum(recov)))
head(recov_Cases_daily)
recov_Cases_daily$DailyTrend = recov_Cases_daily[2:dim(recov_Cases_daily)[1],'recovCases'] -
recov_Cases_daily[1:dim(recov_Cases_daily)[1],'recovCases']
recov_Cases_daily$DailyTrend <- ifelse(recov_Cases_daily$DailyTrend < 0,0,recov_Cases_daily$DailyTrend)
ggplot(recov_Cases_daily,aes(x = date, y = DailyTrend)) +
geom_line() +
labs(title = "Recovered Cases daily basis")
ggplot() + geom_line(data =conf_Cases_daily, aes(x=date,y=DailyTrend),color='red') +
geom_line(data =death_Cases_daily, aes(x=date,y=DailyTrend),color='blue') +
geom_line(data =recov_Cases_daily, aes(x=date,y=DailyTrend),color='black') + geom_point()
df_list <- list(conf_Cases_country, death_Cases_country, recov_Cases_country)
df_list <- list(conf_Cases_country, death_Cases_country, recov_Cases_country)
df_list <- list(conf_Cases_country, death_Cases_country, recov_Cases_country)
df_list <- list(Countrywise_ConfCases , death_Cases_country, recov_Cases_country)
df_list <- df_list %>% reduce(full_join, by='country')
df_list <- list(Countrywise_ConfCases , death_Cases_country, recov_Cases_country)
df_list <- df_list %>% reduce(full_join, by='country')
df_list <- list(Countrywise_ConfCases , death_Cases_country, recov_Cases_country)
df_list <- df_list %>% reduce(full_join, by='country')
df_list <- list(Countrywise_ConfCases , death_Cases_country, recov_Cases_country)
df_list <- df_list %>% reduce(full_join, by='country')
head(df_list)
ggplot(df_list,aes(x = totalCases_conf,y = totalCases_recov)) + geom_point() + ylim(0,1000000) + xlim(0,1000000)
ggplot(df_list,aes(x = totalCases_conf,y = totalCases_Death)) + geom_point() + ylim(0,25000) + xlim(0,1000000)
df_list$totalCases_conf = df_list$totalCases_conf
df_list$totalCases_death = df_list$totalCases_Death
df_list$totalCases_recov = df_list$totalCases_recov
head(df_list %>% arrange(desc(totalCases_conf)),10)
df_list[df_list$country == 'India',]
df_list = mutate(df_list,recovery_rate = totalCases_recov / totalCases_conf)
df_list = mutate(df_list,mortality_rate = totalCases_death / totalCases_conf)
head(df_list %>% arrange(desc(mortality_rate)))
head(df_list %>% arrange(desc(recovery_rate)))
df_list <- list(conf_Cases_country, death_Cases_country, recov_Cases_country)
df_list <- list(Countrywise_ConfCases, death_Cases_country, recov_Cases_country)
df_list <- df_list %>% reduce(full_join, by='country')
sum(df_list$totalCases_conf) /1000000000 # in billion
sum(df_list$totalCases_death) /1000000 # Million
sum(df_list$totalCases_death) /1000000 # Million
sum(df_list$totalCases_conf) /1000000000 # in billion
sum(df_list$totalCases_conf) /1000000000 # in billion
sum(df_list$totalCases_conf) /1000000000 # in billion
sum(df_list$totalCases_death) /1000000 # Million
sum(df_list$totalCases_recov) /1000000 # Million
# recov_Cases_daily
recov_Cases_daily %>% summarise("mean( in lakh)" = mean(DailyTrend)) /100000
conf_Cases_daily %>% summarise("mean( in lakh)" = mean(DailyTrend)) / 100000
death_Cases_daily %>% summarise("mean( in thousands)" = mean(DailyTrend))/ 1000
#### Plot Recovery and Death Rate
tail(country)
daily = country %>% select('date','recov','conf','death') %>% group_by(date) %>% summarise(total_recov = sum(recov),
total_conf = sum(conf),
total_death = sum(death))
daily = country %>% select('date','recov','conf','death') %>% group_by(date) %>% summarise(total_recov = sum(recov),
total_conf = sum(conf),
total_death = sum(death))
head(daily)
daily = mutate(daily,recovery_rate = total_recov / total_conf)
daily = mutate(daily,mortality_rate = total_death / total_conf)
ggplot(daily,aes(x = date, y = recovery_rate)) +
geom_line() +
labs(title = "Recovery rate daily basis")
ggplot(daily,aes(x = date, y = mortality_rate)) +
geom_line() +
labs(title = "Death rate daily basis")
data = head(country %>% group_by(country) %>% summarise(Active_cases = sum(newActive)) %>% arrange(desc(Active_cases)),40)
ggplot(data,aes(x = reorder(country,Active_cases),y = Active_cases,fill = Active_cases)) +
geom_bar(stat = "identity") + coord_flip() +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
monthwise_cases= country %>% group_by(month = lubridate::floor_date(date, 'month')) %>%
summarize(Conf = sum(newCases),death = sum(newDeath),recov = sum(newRecovered))
monthwise_cases= country %>% group_by(month = lubridate::floor_date(date, 'month')) %>%
summarize(Conf = sum(newCases),death = sum(newDeath),recov = sum(newRecovered))
monthwise_cases = head(monthwise_cases,18)
monthwise_cases= country %>% group_by(month = lubridate::floor_date(date, 'month')) %>%
summarize(Conf = sum(newCases),death = sum(newDeath),recov = sum(newRecovered))
monthwise_cases = head(monthwise_cases,18)
monthwise_cases= country %>% group_by(month = lubridate::floor_date(date, 'month')) %>%
summarize(Conf = sum(newCases),death = sum(newDeath),recov = sum(newRecovered))
monthwise_cases = head(monthwise_cases,18)
monthwise_cases
ggplot() + geom_line(data =monthwise_cases, aes(x=month,y=Conf),color='red') +
geom_line(data =monthwise_cases, aes(x=month,y=death),color='blue') +
geom_line(data =monthwise_cases, aes(x=month,y=recov),color='black') + geom_point()
country$newRecovered = abs(country$newRecovered)
d = head(country %>% select('country','newRecovered','newDeath') %>%
group_by(country)  %>%
summarise(recov = sum(newRecovered), death = sum(newDeath)),30)
ggplot(d,aes(x = recov, y = death,color = country)) + geom_point()
ggplot(df_list,aes(x = totalCases_conf,y = totalCases_recov)) +
geom_point() +
ylim(0,1000000) +
xlim(0,1000000)
ggplot(df_list,aes(x = totalCases_conf,y = totalCases_Death)) +
geom_point() +
ylim(0,25000) +
xlim(0,1000000)
recov_Cases_daily = data.frame(country %>% group_by(date) %>%
summarise(recovCases = sum(recov)))
head(recov_Cases_daily)
